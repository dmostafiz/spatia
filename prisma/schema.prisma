// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  email String       @unique
  name  String?
  posts Discussion[] @relation("posts")

  privatePostIds String[]     @db.ObjectId
  privatePosts   Discussion[] @relation(name: "privatePosts", fields: [privatePostIds], references: [id])

  Reply Reply[]
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  icon        String
  slug        String
  title       String
  description String

  discussions Discussion[]

  createdAt DateTime @default(now())
}

type Tags {
  name String
}

model Discussion {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String

  tags    Tags[]
  replies Reply[]

  views Int? @default(0)

  author   User   @relation(name: "posts", fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  isPrivate Boolean? @default(false)
  
  privateMemberIds String[] @db.ObjectId
  privateMembers   User[]   @relation(name: "privatePosts", fields: [privateMemberIds], references: [id])

  createdAt DateTime @default(now())
}

model Reply {

  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  discussion    Discussion @relation(fields: [discussionId], references: [id])
  discussionId String     @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  parent   Reply?  @relation("childs", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId

  childs Reply[] @relation("childs")

  createdAt DateTime @default(now())
}
