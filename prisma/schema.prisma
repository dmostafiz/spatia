// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String?
  name     String?
  avatar   String?

  bio String?

  role String @default("user")

  posts Discussion[] @relation("posts")

  privatePostIds String[]     @db.ObjectId
  privatePosts   Discussion[] @relation(name: "privatePosts", fields: [privatePostIds], references: [id])

  replies         Reply[]
  reactions       Reaction[]
  reply_reactions Replyreaction[]

  followerIds String[] @db.ObjectId
  followers   User[]   @relation(name: "followers", fields: [followerIds], references: [id])

  followingIds String[] @db.ObjectId
  followings   User[]   @relation(name: "followers", fields: [followingIds], references: [id])

  haterIds String[] @db.ObjectId
  haters   User[]   @relation(name: "haters", fields: [haterIds], references: [id])

  hatingIds String[] @db.ObjectId
  hatings   User[]   @relation(name: "haters", fields: [hatingIds], references: [id])

  followingDiscussionIds String[]     @db.ObjectId
  followingDiscussions   Discussion[] @relation(name: "followingDiscussions", fields: [followingDiscussionIds], references: [id])

  ignoringDiscussionIds String[]     @db.ObjectId
  ignoringDiscussions   Discussion[] @relation(name: "ignoringDiscussions", fields: [ignoringDiscussionIds], references: [id])

  notifications Notification[]

  points      Int     @default(0)
  status      Boolean @default(true)
  isAdmin     Boolean @default(false)
  isModerator Boolean @default(false)
  isNew       Boolean @default(true)

  disablePrivateDiscussion             Boolean @default(false)
  automaticallyFollowRepliedDiscussion Boolean @default(false)

  webNotification   String[]
  emailNotification String[]

  createdAt DateTime? @default(now())
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  icon        String
  slug        String
  title       String
  description String

  discussions   Discussion[]
  subCategories SubCategory[]

  createdAt DateTime @default(now())
}

model SubCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  discussions Discussion[]

  createdAt DateTime @default(now())
}

model Discussion {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String

  tags    Tags[]
  replies Reply[]

  views Int? @default(0)

  author   User   @relation(name: "posts", fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?      @db.ObjectId

  isPrivate Boolean? @default(false)

  privateMemberIds String[] @db.ObjectId
  privateMembers   User[]   @relation(name: "privatePosts", fields: [privateMemberIds], references: [id])

  followingUsersIds String[] @db.ObjectId
  followingUsers    User[]   @relation(name: "followingDiscussions", fields: [followingUsersIds], references: [id])

  ignoringUsersIds String[] @db.ObjectId
  ignoringUsers    User[]   @relation(name: "ignoringDiscussions", fields: [ignoringUsersIds], references: [id])

  reactions Reaction[]

  Mentions Mentions[]

  files File[]
  
  recentReplyAt DateTime? @db.Timestamp()

  createdAt DateTime @default(now())
}

type File{
  name String
  url String
}

model Reply {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId String     @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  parent   Reply?  @relation("childs", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId

  childs Reply[] @relation("childs")

  bestAnswer Boolean @default(false)

  reaction Replyreaction[]

  mentions Mentions[]

  files File[]

  createdAt DateTime @default(now())
}

model Reaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  reaction String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId String     @db.ObjectId

  createdAt DateTime @default(now())

  @@unique(fields: [userId, discussionId], name: "user_discussion")
}

model Replyreaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  reaction String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  reply   Reply  @relation(fields: [replyId], references: [id])
  replyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique(fields: [userId, replyId], name: "user_reply")
}

model Notification {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  user   User    @relation(fields: [userId], references: [id])
  text   String?
  link   String?

  senderAvatar String?
  senderName   String?

  status Boolean @default(false)

  createdAt DateTime @default(now())
}

type Tags {
  name String
}

type Mentions {
  userId String @db.ObjectId
}
